


1. 熟悉log4cpp的用法，在网上找相关的教程学习，动手敲代码

2. 封装log4cpp,使用起来比较方便，如下所示。

	　输出的日志信息能同时输出到终端和文件

int main(void)
{
	cout << "hello,world"<<endl;
	
	logInfo("Message");	//或者   
	logError("Message");
	logWarn("Message");
	logDebug("Message");
}
	
	加分项：输出的日志信息中最好能有文件的名字，函数的名字及其所在的行号
				class Mylog
				{
				public:
					Mylog();
					
					~Mylog();
				
					void warn(const char * msg);
					void error();
					void debug();
					void info();
				};
				
				Mylog log;
				log.warn();


3. 在封装完MutexLock之后，封装条件变量Condition类
   提示： MutexLock和Condition类的框架

   class MutexLock
   {
   public:
			void lock();
			void unlock();
			pthread_mutex_t * getMutexPtr();
	 private:
	 	  pthread_mutex_t _mutex;
   };

   class Condtion
   {
   public:
			void wait(MutexLock & mutex);
			void notify();
			void notifyall();
	 private:
	 	  pthread_mutex_t _mutex;
   };

4. 编写一个类，实现简单的栈。栈中有以下操作：
		   > 元素入栈     void push(int);
		   > 元素出栈     void pop();
		   > 读出栈顶元素 int top();
		   > 判断栈空     bool emty();
		   > 判断栈满     bool full();
	 如果栈溢出，程序终止。栈的数据成员由存放
	 10个整型数据的数组构成。先后做如下操作：
	     > 创建栈
	     > 将10入栈
	     > 将12入栈
	     > 将14入栈
	     > 读出并输出栈顶元素
	     > 出栈
	     > 读出并输出栈顶元素

5. 编写一个类，实现简单的队列。队列中有以下操作：
       > 元素入队             void push(int);
       > 元素出队             void pop();
       > 读取队头元素         int front();
       > 读取队尾元素         int back();
       > 判断队列是否为空     bool emty();
		   > 判断队列是否已满     bool full();

